{"ast":null,"code":"import _slicedToArray from \"D:\\\\ACAD2\\\\ReactJs\\\\ReactJs-Colt-Steele\\\\10-lights-out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\ACAD2\\\\ReactJs\\\\ReactJs-Colt-Steele\\\\10-lights-out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\ACAD2\\\\ReactJs\\\\ReactJs-Colt-Steele\\\\10-lights-out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\ACAD2\\\\ReactJs\\\\ReactJs-Colt-Steele\\\\10-lights-out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\ACAD2\\\\ReactJs\\\\ReactJs-Colt-Steele\\\\10-lights-out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\ACAD2\\\\ReactJs\\\\ReactJs-Colt-Steele\\\\10-lights-out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\ACAD2\\\\ReactJs\\\\ReactJs-Colt-Steele\\\\10-lights-out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\ACAD2\\\\ReactJs\\\\ReactJs-Colt-Steele\\\\10-lights-out\\\\react-lights-out-starter\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      //board: this.createBoard()\n      board: [[false, false, false, false, false], [false, false, true, false, false], [false, true, true, true, false], [false, false, true, false, false], [false, false, false, false, false]]\n    };\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n\n      for (var i = 0; i < ncols; i++) {\n        var arr = [];\n\n        for (var j = 0; j < nrows; j++) {\n          var st = Boolean(Math.floor(Math.random() * 2));\n          arr.push(st);\n        }\n\n        board.push(arr);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props2 = this.props,\n          ncols = _this$props2.ncols,\n          nrows = _this$props2.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      flipCell(y, x);\n      flipCell(y - 1, x);\n      flipCell(y + 1, x);\n      flipCell(y, x - 1);\n      flipCell(y, x + 1); // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = board.flat().every(function (x) {\n        return x === false;\n      });\n      console.log(board);\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // TODO\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 7\n        }\n      }, // if the game is won, just show a winning msg & render nothing else\n      this.state.hasWon && \"YOU WIN\", /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }\n      }, // TODO\n      // make table board\n      !this.state.hasWon && this.state.board.map(function (arr, i) {\n        return arr.map(function (st, j) {\n          return /*#__PURE__*/React.createElement(Cell, {\n            key: \"\".concat(i, \"-\").concat(j),\n            coord: \"\".concat(i, \"-\").concat(j),\n            isLit: st,\n            flipCellsAroundMe: _this2.flipCellsAround,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 35\n            }\n          });\n        });\n      })));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5\n};\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","Board","props","state","hasWon","board","flipCellsAround","bind","ncols","nrows","i","arr","j","st","Boolean","Math","floor","random","push","coord","split","map","Number","y","x","flipCell","flat","every","console","log","setState","defaultProps"],"sources":["D:/ACAD2/ReactJs/ReactJs-Colt-Steele/10-lights-out/react-lights-out-starter/src/Board.js"],"sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5\n  }\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      //board: this.createBoard()\n      board: [\n        [false,false,false,false,false],\n        [false,false,true,false,false],\n        [false,true,true,true,false],\n        [false,false,true,false,false],\n        [false,false,false,false,false]\n      ]\n    };\n    this.flipCellsAround=this.flipCellsAround.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    let {ncols, nrows} = this.props;\n\n    for(let i=0;i<ncols;i++){\n      let arr = [];\n      for(let j=0;j<nrows;j++){\n        let st = Boolean(Math.floor(Math.random()*2));\n        arr.push(st);\n      }\n      board.push(arr);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y,x);\n    flipCell(y-1,x);\n    flipCell(y+1,x);\n    flipCell(y,x-1);\n    flipCell(y,x+1);\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.flat().every(x => x===false);\n    console.log(board)\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    // TODO\n    return(\n      <div>\n        {\n          // if the game is won, just show a winning msg & render nothing else\n          this.state.hasWon && \"YOU WIN\"\n        }   \n        \n        <div className=\"Board\">\n          {\n             // TODO\n             // make table board\n            !this.state.hasWon && (\n              this.state.board.map((arr,i) => \n                arr.map((st,j) => <Cell key={`${i}-${j}`} coord={`${i}-${j}`} isLit={st} flipCellsAroundMe={this.flipCellsAround}/>))\n            )\n          }\n        </div>\n          \n        \n      </div>\n    );\n  }\n}\n\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}