{"ast":null,"code":"import _slicedToArray from \"D:\\\\ACAD2\\\\ReactJs\\\\ReactJs-Colt-Steele\\\\10-lights-out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\ACAD2\\\\ReactJs\\\\ReactJs-Colt-Steele\\\\10-lights-out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\ACAD2\\\\ReactJs\\\\ReactJs-Colt-Steele\\\\10-lights-out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\ACAD2\\\\ReactJs\\\\ReactJs-Colt-Steele\\\\10-lights-out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\ACAD2\\\\ReactJs\\\\ReactJs-Colt-Steele\\\\10-lights-out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\ACAD2\\\\ReactJs\\\\ReactJs-Colt-Steele\\\\10-lights-out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\ACAD2\\\\ReactJs\\\\ReactJs-Colt-Steele\\\\10-lights-out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: [[false, false, false], [true, false, true], [false, false, true]]\n    };\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      //console.log(this);\n      var board = [];\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows; // TODO: create array-of-arrays of true/false values\n      // this.state.board.forEach(arr => {\n      //   board.push(arr.map(st => <Cell isLit={st} flipCellsAroundMe={this.flipCellsAround}/>));\n      // });\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props2 = this.props,\n          ncols = _this$props2.ncols,\n          nrows = _this$props2.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      //this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.createBoard();\n      return; // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 3,\n  ncols: 3\n};\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","Board","props","state","hasWon","board","flipCellsAround","bind","ncols","nrows","coord","split","map","Number","y","x","flipCell","createBoard","defaultProps"],"sources":["D:/ACAD2/ReactJs/ReactJs-Colt-Steele/10-lights-out/react-lights-out-starter/src/Board.js"],"sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 3,\n    ncols: 3\n  }\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: [[false, false, false], [true, false, true],[false, false, true]]\n    };\n    this.flipCellsAround=this.flipCellsAround.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    //console.log(this);\n    let board = [];\n    let {ncols, nrows} = this.props;\n    \n    // TODO: create array-of-arrays of true/false values\n    // this.state.board.forEach(arr => {\n    //   board.push(arr.map(st => <Cell isLit={st} flipCellsAroundMe={this.flipCellsAround}/>));\n    // });\n\n  \n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    //this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    this.createBoard();\n    return;\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMC,K;;;EAOJ,eAAYC,KAAZ,EAAmB;IAAA;;IAAA;;IACjB,2EAAMA,KAAN,GADiB,CAGjB;;IACA,MAAKC,KAAL,GAAa;MACXC,MAAM,EAAE,KADG;MAEXC,KAAK,EAAE,CAAC,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAD,EAAwB,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,CAAxB,EAA4C,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,CAA5C;IAFI,CAAb;IAIA,MAAKC,eAAL,GAAqB,MAAKA,eAAL,CAAqBC,IAArB,uDAArB;IARiB;EASlB;EAED;;;;;kCAEc;MACZ;MACA,IAAIF,KAAK,GAAG,EAAZ;MAFY,kBAGS,KAAKH,KAHd;MAAA,IAGPM,KAHO,eAGPA,KAHO;MAAA,IAGAC,KAHA,eAGAA,KAHA,EAKZ;MACA;MACA;MACA;;MAGA,OAAOJ,KAAP;IACD;IAED;;;;oCAEgBK,K,EAAO;MAAA,mBACA,KAAKR,KADL;MAAA,IAChBM,KADgB,gBAChBA,KADgB;MAAA,IACTC,KADS,gBACTA,KADS;MAErB,IAAIJ,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;MAFqB,uBAGRK,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;MAAA;MAAA,IAGhBC,CAHgB;MAAA,IAGbC,CAHa;;MAMrB,SAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;QACtB;QAEA,IAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGP,KAAd,IAAuBM,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGL,KAAzC,EAAgD;UAC9CJ,KAAK,CAACS,CAAD,CAAL,CAASC,CAAT,IAAc,CAACV,KAAK,CAACS,CAAD,CAAL,CAASC,CAAT,CAAf;QACD;MACF,CAZoB,CAcrB;MAEA;MACA;MAEA;;IACD;IAGD;;;;6BAES;MACP,KAAKE,WAAL;MACA,OAFO,CAGP;MAEA;MAEA;MAEA;IACD;;;;EAvEiBlB,S;;AAAdE,K,CAEGiB,Y,GAAe;EACpBT,KAAK,EAAE,CADa;EAEpBD,KAAK,EAAE;AAFa,C;AAyExB,eAAeP,KAAf"},"metadata":{},"sourceType":"module"}